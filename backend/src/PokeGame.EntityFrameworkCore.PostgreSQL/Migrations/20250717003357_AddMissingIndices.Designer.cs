// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PokeGame.EntityFrameworkCore;

#nullable disable

namespace PokeGame.EntityFrameworkCore.PostgreSQL.Migrations
{
    [DbContext(typeof(PokemonContext))]
    [Migration("20250717003357_AddMissingIndices")]
    partial class AddMissingIndices
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.AbilityEntity", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AbilityId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("AbilityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Abilities", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.FormAbilityEntity", b =>
                {
                    b.Property<int>("FormAbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormAbilityId"));

                    b.Property<int>("AbilityId")
                        .HasColumnType("integer");

                    b.Property<Guid>("AbilityUid")
                        .HasColumnType("uuid");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FormUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Slot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("FormAbilityId");

                    b.HasIndex("AbilityId");

                    b.HasIndex("AbilityUid");

                    b.HasIndex("FormUid");

                    b.HasIndex("FormId", "AbilityId")
                        .IsUnique();

                    b.HasIndex("FormId", "Slot")
                        .IsUnique();

                    b.ToTable("FormAbilities", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.FormEntity", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormId"));

                    b.Property<string>("AlternativeSprite")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("AlternativeSpriteShiny")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("AttackBase")
                        .HasColumnType("integer");

                    b.Property<int>("AttackYield")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultSprite")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("DefaultSpriteShiny")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("DefenseBase")
                        .HasColumnType("integer");

                    b.Property<int>("DefenseYield")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ExperienceYield")
                        .HasColumnType("integer");

                    b.Property<int>("HPBase")
                        .HasColumnType("integer");

                    b.Property<int>("HPYield")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBattleOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMega")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SecondaryType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SpecialAttackBase")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialAttackYield")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefenseBase")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefenseYield")
                        .HasColumnType("integer");

                    b.Property<int>("SpeedBase")
                        .HasColumnType("integer");

                    b.Property<int>("SpeedYield")
                        .HasColumnType("integer");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("VarietyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("VarietyUid")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("FormId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("ExperienceYield");

                    b.HasIndex("Height");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("VarietyUid");

                    b.HasIndex("Version");

                    b.HasIndex("Weight");

                    b.HasIndex("VarietyId", "IsDefault");

                    b.ToTable("Forms", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.ItemEntity", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<string>("BattleItem")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Berry")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Medicine")
                        .HasColumnType("text");

                    b.Property<int?>("MoveId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoveUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PokeBall")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("Sprite")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("ItemId");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MoveId");

                    b.HasIndex("MoveUid");

                    b.HasIndex("Price");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Items", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.MoveEntity", b =>
                {
                    b.Property<int>("MoveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MoveId"));

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<int>("AccuracyChange")
                        .HasColumnType("integer");

                    b.Property<int>("AttackChange")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CriticalChange")
                        .HasColumnType("integer");

                    b.Property<int>("DefenseChange")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("EvasionChange")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Power")
                        .HasColumnType("integer");

                    b.Property<int>("PowerPoints")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialAttackChange")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialDefenseChange")
                        .HasColumnType("integer");

                    b.Property<int>("SpeedChange")
                        .HasColumnType("integer");

                    b.Property<int>("StatusChance")
                        .HasColumnType("integer");

                    b.Property<string>("StatusCondition")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<string>("VolatileConditions")
                        .HasColumnType("text");

                    b.HasKey("MoveId");

                    b.HasIndex("Accuracy");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Power");

                    b.HasIndex("PowerPoints");

                    b.HasIndex("StatusCondition");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("Type");

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Moves", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.PokemonEntity", b =>
                {
                    b.Property<int>("PokemonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PokemonId"));

                    b.Property<string>("AbilitySlot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Characteristic")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentTrainerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CurrentTrainerUid")
                        .HasColumnType("uuid");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("FormId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FormUid")
                        .HasColumnType("uuid");

                    b.Property<byte>("Friendship")
                        .HasColumnType("smallint");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GrowthRate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<byte>("Height")
                        .HasColumnType("smallint");

                    b.Property<int?>("HeldItemId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HeldItemUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumExperience")
                        .HasColumnType("integer");

                    b.Property<int?>("MetAtLevel")
                        .HasColumnType("integer");

                    b.Property<string>("MetDescription")
                        .HasColumnType("text");

                    b.Property<string>("MetLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("MetOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nature")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("OriginalTrainerId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OriginalTrainerUid")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnershipKind")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PokeBallId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PokeBallUid")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpeciesUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Sprite")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("Stamina")
                        .HasColumnType("integer");

                    b.Property<string>("Statistics")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StatusCondition")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TeraType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ToNextLevel")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("VarietyId")
                        .HasColumnType("integer");

                    b.Property<Guid>("VarietyUid")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.Property<int>("Vitality")
                        .HasColumnType("integer");

                    b.Property<byte>("Weight")
                        .HasColumnType("smallint");

                    b.HasKey("PokemonId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("CurrentTrainerId");

                    b.HasIndex("CurrentTrainerUid");

                    b.HasIndex("Experience");

                    b.HasIndex("FormId");

                    b.HasIndex("FormUid");

                    b.HasIndex("Friendship");

                    b.HasIndex("Gender");

                    b.HasIndex("HeldItemId");

                    b.HasIndex("HeldItemUid");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("Nature");

                    b.HasIndex("Nickname");

                    b.HasIndex("OriginalTrainerId");

                    b.HasIndex("OriginalTrainerUid");

                    b.HasIndex("PokeBallId");

                    b.HasIndex("PokeBallUid");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("SpeciesUid");

                    b.HasIndex("StatusCondition");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("TeraType");

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("VarietyId");

                    b.HasIndex("VarietyUid");

                    b.HasIndex("Version");

                    b.ToTable("Pokemon", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.PokemonMoveEntity", b =>
                {
                    b.Property<int>("PokemonId")
                        .HasColumnType("integer");

                    b.Property<int>("MoveId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentPowerPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMastered")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaximumPowerPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("MoveUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PokemonUid")
                        .HasColumnType("uuid");

                    b.Property<int?>("Position")
                        .HasColumnType("integer");

                    b.Property<int>("ReferencePowerPoints")
                        .HasColumnType("integer");

                    b.Property<bool>("TechnicalMachine")
                        .HasColumnType("boolean");

                    b.HasKey("PokemonId", "MoveId");

                    b.HasIndex("MoveId");

                    b.HasIndex("MoveUid");

                    b.HasIndex("PokemonUid");

                    b.ToTable("PokemonMoves", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.RegionEntity", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("RegionId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Regions", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.RegionalNumberEntity", b =>
                {
                    b.Property<int>("RegionalNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionalNumberId"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RegionUid")
                        .HasColumnType("uuid");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpeciesUid")
                        .HasColumnType("uuid");

                    b.HasKey("RegionalNumberId");

                    b.HasIndex("RegionUid");

                    b.HasIndex("SpeciesUid");

                    b.HasIndex("RegionId", "Number")
                        .IsUnique();

                    b.HasIndex("SpeciesId", "RegionId")
                        .IsUnique();

                    b.ToTable("RegionalNumbers", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.SpeciesEntity", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpeciesId"));

                    b.Property<byte>("BaseFriendship")
                        .HasColumnType("smallint");

                    b.Property<byte>("CatchRate")
                        .HasColumnType("smallint");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GrowthRate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("SpeciesId");

                    b.HasIndex("BaseFriendship");

                    b.HasIndex("CatchRate");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("GrowthRate");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.ToTable("Species", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.TrainerEntity", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainerId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LicenseNormalized")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Money")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Sprite")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("TrainerId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Gender");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("License");

                    b.HasIndex("LicenseNormalized")
                        .IsUnique();

                    b.HasIndex("Money");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("UserId");

                    b.HasIndex("Version");

                    b.ToTable("Trainers", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.VarietyEntity", b =>
                {
                    b.Property<int>("VarietyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VarietyId"));

                    b.Property<bool>("CanChangeForm")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderRatio")
                        .HasColumnType("integer");

                    b.Property<string>("Genus")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpeciesUid")
                        .HasColumnType("uuid");

                    b.Property<string>("StreamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UniqueNameNormalized")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("VarietyId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Genus");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("SpeciesUid");

                    b.HasIndex("StreamId")
                        .IsUnique();

                    b.HasIndex("UniqueName");

                    b.HasIndex("UniqueNameNormalized")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UpdatedOn");

                    b.HasIndex("Version");

                    b.HasIndex("SpeciesId", "IsDefault");

                    b.ToTable("Varieties", "Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.FormAbilityEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.AbilityEntity", "Ability")
                        .WithMany("Forms")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.FormEntity", "Form")
                        .WithMany("Abilities")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.FormEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.VarietyEntity", "Variety")
                        .WithMany("Forms")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.ItemEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.MoveEntity", "Move")
                        .WithMany("TechnicalMachines")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Move");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.PokemonEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.TrainerEntity", "CurrentTrainer")
                        .WithMany("CurrentPokemon")
                        .HasForeignKey("CurrentTrainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.FormEntity", "Form")
                        .WithMany("Pokemon")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.ItemEntity", "HeldItem")
                        .WithMany("HoldingPokemon")
                        .HasForeignKey("HeldItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.TrainerEntity", "OriginalTrainer")
                        .WithMany("OriginalPokemon")
                        .HasForeignKey("OriginalTrainerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.ItemEntity", "PokeBall")
                        .WithMany("ContainedPokemon")
                        .HasForeignKey("PokeBallId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.SpeciesEntity", "Species")
                        .WithMany("Pokemon")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.VarietyEntity", "Variety")
                        .WithMany("Pokemon")
                        .HasForeignKey("VarietyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentTrainer");

                    b.Navigation("Form");

                    b.Navigation("HeldItem");

                    b.Navigation("OriginalTrainer");

                    b.Navigation("PokeBall");

                    b.Navigation("Species");

                    b.Navigation("Variety");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.PokemonMoveEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.MoveEntity", "Move")
                        .WithMany("Pokemon")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.PokemonEntity", "Pokemon")
                        .WithMany("Moves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.RegionalNumberEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.RegionEntity", "Region")
                        .WithMany("RegionalNumbers")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.SpeciesEntity", "Species")
                        .WithMany("RegionalNumbers")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.VarietyEntity", b =>
                {
                    b.HasOne("PokeGame.EntityFrameworkCore.Entities.SpeciesEntity", "Species")
                        .WithMany("Varieties")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.AbilityEntity", b =>
                {
                    b.Navigation("Forms");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.FormEntity", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.ItemEntity", b =>
                {
                    b.Navigation("ContainedPokemon");

                    b.Navigation("HoldingPokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.MoveEntity", b =>
                {
                    b.Navigation("Pokemon");

                    b.Navigation("TechnicalMachines");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.PokemonEntity", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.RegionEntity", b =>
                {
                    b.Navigation("RegionalNumbers");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.SpeciesEntity", b =>
                {
                    b.Navigation("Pokemon");

                    b.Navigation("RegionalNumbers");

                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.TrainerEntity", b =>
                {
                    b.Navigation("CurrentPokemon");

                    b.Navigation("OriginalPokemon");
                });

            modelBuilder.Entity("PokeGame.EntityFrameworkCore.Entities.VarietyEntity", b =>
                {
                    b.Navigation("Forms");

                    b.Navigation("Pokemon");
                });
#pragma warning restore 612, 618
        }
    }
}
